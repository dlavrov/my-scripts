#!/usr/bin/perl -w
#############################################################################
#                                 gornex_out                                #
$VERSION = "version 1.0";                                                   #
#                                                                           #
#                             By Dennis Lavrov                              #
#                        last modified 12/18/2008,                          #
#############################################################################
#
## This version of gornex has been modified to make it more portable (but less functional)
## Please report bugs to Dennis Lavrov (dlavrov@iastate.edu)

&usage if ( $#ARGV < 1 );
use strict;

my $uphushref      = createhush(0);
my $downhushref    = createhush(1);
my @all_boundaries = ();
my ( $gorfile, $genepair, $taxlabels );
my $outfile = "gorder.dat";
my $i;
for $i ( 0 .. $#ARGV )
{    #Read files from @ARGV extract gene arrangement from them;
    $gorfile = $ARGV[$i];
    my ( $line, $boundary );
    my @gene_pairs;
    my $species_name;
    my $species_counter = 0;
    my $new_species = 0;
    open( IN, "<$gorfile" ) || die "Can't read from \"$gorfile\": $!\n";
    my @filedata = <IN;
    close(IN) or die "Can't close $gorfile $!\n";
    foreach my $line (@filedata) {
	  if ($line =~ /^\s*$/) || ($line =~ /^\s*;/) || ($line =~ /^\s*#/) {
		    next;
	  }
	  elsif ($line =~ /^>/) {
		  chomp($species_name=$line);
		  $species_counter ++;
		  $new_species = 1;
	  }
	  else {
		  die "Wrong file format (no species name starting with > or multiple gene order lines)\n" unless ($new_species);
		  chomp ($line);
		  $line = &GetBoundaries($line);
		  @gene_pairs = split( / /, $line );
	          open(OUT, ">>$outfile") or die "Can't write to \"gorder.dat\": $!\n";
		  foreach $genepair (@gene_pairs) {
        		my ( $sign1, $gene1, $sign2, $gene2 );
        		if ( $genepair =~ /^(\+|-)(.+)(\+|-)(.+)$/ ) {
            			( $sign1, $gene1, $sign2, $gene2 ) = ( $genepair =~ /^(\+|-)(.+)(\+|-)(.+)$/ );
            			$gene1 =~ s/(\w+)\((\w+)\)/$1_$2/
              			if ( $gene1 =~ /\(\S+\)/ );    #get rid of the brackets
            			$gene2 =~ s/(\w+)\((\w+)\)/$1_$2/
              			if ( $gene2 =~ /\(\S+\)/ );    #get rid of the brackets
        		}
        		if ( $sign1 eq "+" && $sign2 eq "+" ) {
            			$gene_boundaries[ $downhushref->{$gene1} ] ="5-$gene2"; #$uphushref->{$gene2};
            $gene_boundaries[ $uphushref->{$gene2} ] =
              "3-$gene1";                    #$downhushref->{$gene1};
        }
        elsif ( $sign1 eq "-" && $sign2 eq "+" ) {
            $gene_boundaries[ $uphushref->{$gene1} ] = "5-$gene2"
              ; #$uphushref->{$gene2}; #we will have to use table 2 for the other strand genes
            $gene_boundaries[ $uphushref->{$gene2} ] =
              "5-$gene1";    #$uphushref->{$gene1};
        }
        elsif ( $sign1 eq "+" && $sign2 eq "-" ) {
            $gene_boundaries[ $downhushref->{$gene1} ] =
              "3-$gene2";    #$downhushref->{$gene2};
            $gene_boundaries[ $downhushref->{$gene2} ] =
              "3-$gene1";    #$downhushref->{$gene1};
        }
    }
    $taxlabels .= "\t\'$gorfile\'\n";    # unshift @gene_boundaries, "$gorfile";
    $all_boundaries[$i] = [@gene_boundaries];
}
my ( $arrayref, $statelabels ) = convert_table( \@all_boundaries );
@all_boundaries = @$arrayref;    #I recicle @all_boundaries for new table

#output
print "Name output file [gorder.dat] ? If no, enter file name:";
my $outfile = <STDIN>;
chomp($outfile);
if ( $outfile eq "" ) {
    $outfile = "gorder.dat";
}
my $ntax = @gofiles;

#remove old output file (if exists)
if ( -e $outfile ) {
    print "Rewriting file \"$outfile\"!\n";
}
open( OUT, ">$outfile" ) || die "Can't write to \"$outfile\": $!\n";
print OUT "#NEXUS
begin data;
dimensions ntax = $ntax  nchar = 82;
FORMAT MISSING=?  TRANSPOSE  SYMBOLS= \" A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\";
TAXLABELS
$taxlabels\n;
STATELABELS
$statelabels
;
MATRIX\n";
my @all_genes = sort ( keys %$uphushref );
push @all_genes, @all_genes;
for $i ( 0 .. $#all_boundaries ) {
    $arrayref = $all_boundaries[$i];
    my $gene = shift(@all_genes);
    if   ( $i < 41 ) { print OUT "$gene" . "_>\t@$arrayref\n"; }
    else             { print OUT "<_$gene\t@$arrayref\n"; }
}
print OUT ";\nend;\n";
close(OUT) or die "Can't close \"$outfile\": $!\n";
print "Done!\n";


##########################Create Hush##############################
#This routine creates a lookup table and returns a reference to it
sub createhush {
    my $downhash = shift(@_);
    my $addme    = $downhash ? 0 : 41;
    my $retref   = {
        atp6      => 0 + $addme,
        atp8      => 1 + $addme,
        atp9      => 2 + $addme,
        cob       => 3 + $addme,
        cox1      => 4 + $addme,
        cox2      => 5 + $addme,
        cox3      => 6 + $addme,
        nad1      => 7 + $addme,
        nad2      => 8 + $addme,
        nad3      => 9 + $addme,
        nad4      => 10 + $addme,
        nad4L     => 11 + $addme,
        nad5      => 12 + $addme,
        nad6      => 13 + $addme,
        rnl       => 14 + $addme,
        rns       => 15 + $addme,
        trnA      => 16 + $addme,
        trnC      => 17 + $addme,
        trnD      => 18 + $addme,
        trnE      => 19 + $addme,
        trnF      => 20 + $addme,
        trnG      => 21 + $addme,
        trnH      => 22 + $addme,
        trnI      => 23 + $addme,
        trnI_cau  => 24 + $addme,
        trnK      => 25 + $addme,
        trnL_uaa  => 26 + $addme,
        trnL_uag  => 27 + $addme,
        trnM      => 28 + $addme,
        trnM_caue => 29 + $addme,
        trnN      => 30 + $addme,
        trnP      => 31 + $addme,
        trnQ      => 32 + $addme,
        trnR      => 33 + $addme,
        trnR_ucu  => 34 + $addme,
        trnS_gcu  => 35 + $addme,
        trnS_uga  => 36 + $addme,
        trnT      => 37 + $addme,
        trnV      => 38 + $addme,
        trnW      => 39 + $addme,
        trnY      => 40 + $addme,
    };
    return $retref;
}

sub convert_table {

# converts the table so that the character states for each position are in array
# character states are renamed as capital letters A-Z
# returns an array containing references to arrays for each position
    my $arrayref = shift(@_);
    my ( @LoL_old, @LoL_new, @char_states, $aref, $key, $statelabels, $i, $j );
    @LoL_old = @$arrayref;
    for $j ( 0 .. 81 ) {
        for $i ( 0 .. $#LoL_old ) {
            $aref = $LoL_old[$i];
            $char_states[$i] = shift @$aref;
        }
        my $ascii       = 65;
        my %used_states = ();
        for $i ( 0 .. $#char_states ) {
            if ( defined $char_states[$i] ) {
                if ( defined $used_states{ $char_states[$i] } ) {
                    $char_states[$i] = $used_states{ $char_states[$i] };
                }
                else {
                    $used_states{ $char_states[$i] } = chr($ascii);
                    $char_states[$i] = chr($ascii);
                    $ascii++;
                }
            }
            else { $char_states[$i] = "?"; }
        }
        $statelabels .= $j + 1 . " ";
        foreach $key (
            sort { $used_states{$a} cmp $used_states{$b} }
            keys %used_states
          )
        {
            $statelabels .= "\'$key\' ";
        }
        $statelabels .= ",\n";
        $LoL_new[$j] = [@char_states];
    }
    return ( \@LoL_new, $statelabels );
}
}
}

################## Generates gene boundaries from gene orders ####################################

sub GetBoundaries {

# This subroutine lists and reformats (if needed) all gene boundaries for a given gene order
    my $gene_order     = $_[0];
    my $problemsref    = $_[1];
    my @all_genes      = split( / /, $gene_order );
    my $gene_boundary  = "";
    my $all_boundaries = "";
    my $upstream_gene  = "";
    my $gene;

    foreach $gene (@all_genes) {
        if ($upstream_gene) {
            $gene_boundary = $upstream_gene . $gene;
        }
        else {
            $gene_boundary =
              $all_genes[$#all_genes] . $gene;  #last gene - first gene boundary
        }
        $gene_boundary =~
          s/-([^-]+)-([^-]+)/+$2+$1/;    #this turns around a "-,-" boundary
            #the following two ifs deal with +- or -+ gene boundaries
        if ( $gene_boundary =~ /^\+([^-]+)-([^-]+)$/ ) {
            $gene_boundary = "+$2-$1" if ( ( $1 cmp $2 ) > 0 );
        }
        if ( $gene_boundary =~ /^-([^\+]+)\+([^-]+)$/ ) {
            $gene_boundary = "-$2+$1" if ( ( $1 cmp $2 ) > 0 );
        }
        $upstream_gene  = $gene;
        $all_boundaries = $all_boundaries . $gene_boundary . " ";
    }
    return $all_boundaries;
}

############################Usage############################################
sub usage {
    print "Usage: \"gornex files_to_convert\"\n";
    print "Files should be of the valid type (.go files)\n";
    exit;
}

