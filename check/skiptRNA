#!/usr/bin/perl -w
#############################################################################
#                                 skiptRNA                                  #
$VERSION=                       "version 1.0"                              ;#
#                                                                           #
#                             By Dennis Lavrov                              #
#                        last modified 12/05/2007,                          #
#############################################################################
#
#This script reads individual go files and creates a NEXUS matrix were position
#of each gene is encoded relative to a major gene
#
die "Usage: skiptRNA files in GO format\n" unless $ARGV[0];
use strict;
my %uphash=();
my %downhash=();
my %muphash=();
my %mdnhash=();
my $taxlabels;
my %standard_genes=('atp6' => 0,'atp8' => 0,'atp9' => 0,'cob' => 0,'cox1' => 0,'cox2' => 0,'cox3' => 0,'nad1' => 0,'nad2' => 0,'nad3' => 0,'nad4' => 0,'nad4L' => 0,'nad5' => 0,'nad6' => 0,'rnl' => 0,'rns' => 0,'trnA_ugc' => 0,'trnC_gca' => 0,'trnD_guc' => 0,'trnE_uuc' => 0,'trnF_gaa' => 0,'trnG_ucc' => 0,'trnH_gug' => 0,'trnI_gau' => 0,'trnI_cau' => 0,'trnK_uuu' => 0,'trnL_uaa' => 0,'trnL_uag' => 0,'trnM_cau' => 0,'trnM_caue' => 0,'trnN_guu' => 0,'trnP_ugg' => 0,'trnQ_uug' => 0,'trnR_ucg' => 0,'trnR_ucu' => 0,'trnS_gcu' => 0,'trnS_uga' => 0,'trnT_ugu' => 0,'trnV_uac' => 0,'trnW_uca' => 0,'trnY_gua' => 0);
my %asc=('0','A','1','B','2','C','3','D','4','E','5','F','6','G','7','H','8','I','9','J','10','K','11','L','12','M','13','N','14','O','15','P','16','Q','17','R','18','S','19','T','20','U','21','V','22','W','23','X','24','Y','25','Z');

for my $j(0..(scalar(@ARGV)-1)) #for all my files with the gene order info
{
	my @majgenes=();
 	$taxlabels.=$ARGV[$j]."\n";
 	print "$ARGV[$j]\n";
 	my @fileOneCont=`cat $ARGV[$j]`;
 	my($geneOone,$i);
 	my $m=@fileOneCont;
 	for($i=0;$i< $m;$i++)
 	{
         	next if(($fileOneCont[$i]=~/^;/) || ($fileOneCont[$i]=~/^\s*$/));
                $geneOone=$fileOneCont[$i]; #extract gene order from go file
		last;
 	}
 	chomp($geneOone); 
 	my @genes=split(" ",$geneOone);
 	foreach my $g(@genes) #if not tRNA push to majgenes, else replace () with _
 	{
  		if($g!~/trn/)
		{
			push(@majgenes,$g);
		}
  		if($g=~/\(/)
     		{
			$g=~s/\(/_/;
			$g=~s/\)//;
     		}
 	}
 	my $leftindex=@majgenes-1;
 	my $rightindex=0; ##CHANGED FROM 1;
 	my $sign="+"; ## + by default
 	my $current_gene="";
	my %test_hush = %standard_genes; #NOT sure why I duplicated the hash
	my $test=join ' ', (keys(%test_hush));
	$test=" ".$test." ";
 	foreach my $g(@genes)
 	{
		($sign,$current_gene)=$g=~/([\+-]?)(\w*)/;
		$sign = "+" unless $sign; ## + if no sign
		if ($test !~ " $current_gene ")
		{
			print "Warning: Unusual gene $current_gene in file $ARGV[$j]!\n";
		}
		else
		{
			$test_hush{$current_gene}++;
		}
		
		if($current_gene!~/trn/) #for major genes
        	{
			$rightindex++; #increase rightindex if major gene
			if($rightindex==scalar(@majgenes))
                	{
                           	$rightindex=0;
                 	}
        	}
  		my($upgene,$downgene);
  		if($sign=~/\+/) #if the current gene has a + polarity
  		{
      			if($majgenes[$leftindex]!~/-/) #if major gene has + polarity
			{	
				$upgene='3-'.substr($majgenes[$leftindex],1);
			}
			else
			{
				$upgene='5-'.substr($majgenes[$leftindex],1);
			}
			if($majgenes[$rightindex]!~/-/)
			{
				$downgene='5-'.substr($majgenes[$rightindex],1);
			}
			else
			{
				$downgene='3-'.substr($majgenes[$rightindex],1);
			}
			
		}
		else #if the current gene has a "-" polarity
		{
			if($majgenes[$rightindex]!~/-/) #if major gene has + polarity        
			{
				$upgene='5-'.substr($majgenes[$rightindex],1);
			}
			else
			{
				$upgene='3-'.substr($majgenes[$rightindex],1);
			}
			if($majgenes[$leftindex]!~/-/)
			{
				$downgene='3-'.substr($majgenes[$leftindex],1);
			}
			else
			{
				$downgene='5-'.substr($majgenes[$leftindex],1);
			}
		}
		
		if($current_gene!~/trn/) #We have to do this again to update leftindex
        	{
			$leftindex++; #increase rightindex if major gene
			if($leftindex==scalar(@majgenes))
                	{
                           	$leftindex=0;
                 	}
        	}
#
## Now we have correct upgene and downgene.  Need to update hashes.
#
		#hash uphash contains references to anonymous arrays for each gene
		if($uphash{$current_gene}) 
		{
			my $array_length=scalar(@{$uphash{$current_gene}});
			my $match_found=0;
			for (my $a=0; $a <= $array_length; $a++)
			{	
				if ($uphash{$current_gene}->[$a] && $uphash{$current_gene}->[$a]=~$upgene) ## Potentially something fishy here: the first part is empty sometimes
				{
					my $val=$asc{$a};
					$muphash{$current_gene}->[$j]=$val;
					$match_found=1;
					last;
				}
			}
			unless ($match_found)
			{
				push (@{$uphash{$current_gene}}, $upgene);
				my $val=$asc{$array_length};
				$muphash{$current_gene}->[$j]=$val;
			}
		}
		else
		{
			$uphash{$current_gene} = [$upgene];
			$muphash{$current_gene}->[$j] = 'A';
		}
		
		#hash downhash contains references to anonymous arrays for each gene
		if($downhash{$current_gene}) 
		{
			my $array_length=scalar(@{$downhash{$current_gene}});
			my $match_found=0;
			for (my $a=0; $a <= $array_length; $a++)
			{	
				if ($downhash{$current_gene}->[$a] && $downhash{$current_gene}->[$a]=~$downgene)  ## Potentially something fishy going here: the first part is empty sometimes
				{
					my $val=$asc{$a};
					$mdnhash{$current_gene}->[$j]=$val;
					$match_found=1;
					last;
				}
			}
			unless ($match_found)
			{
				push (@{$downhash{$current_gene}}, $downgene);
				my $val=$asc{$array_length};
				$mdnhash{$current_gene}->[$j]=$val;
			}

		}
		else
		{
			$downhash{$current_gene} = [$downgene];
			$mdnhash{$current_gene}->[$j] = 'A';
		}
	}
	my @test_keys=sort{$a cmp $b}(keys(%test_hush));
	foreach my $k(@test_keys) {
		if ($k!~/trn/ and $test_hush{$k}==0) 
		{
			print "Warning: gene $k is not present in species $ARGV[$j]!\n";
		}
		elsif ($test_hush{$k}>1)
		{
			print "Warning: gene $k is present $test_hush{$k} times in species $ARGV[$j]!\n";
		}
	}
				
}
my $outfile="gorder.dat";
if (-e $outfile) {
        print "Rewriting file \"$outfile\"!\n";
}
open(OUT, ">$outfile") || die "Can't write to \"$outfile\": $!\n";
print OUT "#NEXUS
begin data;
dimensions ntax = " . scalar(@ARGV) . " nchar = 82;
FORMAT MISSING=?  TRANSPOSE  SYMBOLS= \" A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\";
TAXLABELS
$taxlabels;
STATELABELS\n";
my $ctr=1;
my @sorted_keys=sort{$a cmp $b}(keys(%standard_genes));
#print "Here are sorted genes: @sorted_keys\n";
my @downhash_genes=keys(%downhash);
#print "Here is my downhash: @downhash_genes\n";
foreach my $k(@sorted_keys)
{
	if(@{$downhash{$k}})
	{
		print OUT "$ctr ";
		for (my $i=0; $i<scalar(@{$downhash{$k}}); $i++)
		{
			print OUT "\'$downhash{$k}->[$i]\', ";
		}
		print OUT "\n";
	}
	else{print OUT "$ctr ,\n";}
	$ctr++;
}
foreach my $k(@sorted_keys)
{
	if(@{$uphash{$k}})
	{
		print OUT "$ctr ";
		for (my $i=0; $i<scalar(@{$uphash{$k}}); $i++)
		{
			print OUT "\'$uphash{$k}->[$i]\', ";
		}
		print OUT "\n";
	}
	else{print OUT "$ctr ,\n";}
	$ctr++;
}
print OUT ";\nMATRIX\n";

foreach my $k(@sorted_keys)
{
	print OUT "$k"."_>";
	for (my $i=0; $i<scalar(@ARGV); $i++)
	{
		if ($mdnhash{$k}->[$i])
		{
			print OUT " $mdnhash{$k}->[$i]";
		}
		else
		{
			print OUT " ?";
		}
	}
	print OUT "\n";
}
foreach my $k(@sorted_keys)
{
	print OUT "<_$k ";
	for (my $i=0; $i<scalar(@ARGV); $i++)
	{
		if ($muphash{$k}->[$i])
		{
			print OUT " $muphash{$k}->[$i]";
		}
		else
		{
			print OUT " ?";
		}
	}
	print OUT "\n";
}

print OUT ";\nend;\n";
close(OUT) or die "Can't close \"$outfile\": $!\n";
print "Done!\n"



